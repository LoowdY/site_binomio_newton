import streamlit as st
import sympy as sp
import matplotlib.pyplot as plt
import numpy as np
import random
from streamlit_extras.colored_header import colored_header
from streamlit_extras.add_vertical_space import add_vertical_space
from streamlit_extras.stylable_container import stylable_container
import time


def main():

    st.set_page_config(page_title="Bin√¥mio de Newton Interativo", page_icon="üìê", layout="centered")

    st.markdown("""
    <style>
    .stApp {
        background-color: #f0f2f6;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border-radius: 5px;
    }
    .stTextInput>div>div>input {
        background-color: #e8f0fe;
    }
    </style>
    """, unsafe_allow_html=True)

    st.sidebar.title('üìö Navega√ß√£o')
    options = ["üß† Teoria", "üî¢ Calculadora", "üé≤ Coeficientes", "üî∫ Tri√¢ngulo de Pascal", "üí° Exerc√≠cios", "üß™ Laborat√≥rio"]
    choice = st.sidebar.radio("Escolha uma op√ß√£o", options)

    if choice == "üß† Teoria":
        teoria()
    elif choice == "üî¢ Calculadora":
        calculadora()
    elif choice == "üé≤ Coeficientes":
        coeficientes()
    elif choice == "üî∫ Tri√¢ngulo de Pascal":
        triangulo_pascal()
    elif choice == "üí° Exerc√≠cios":
        exercicios_criativos()
    elif choice == "üß™ Laborat√≥rio":
        laboratorio_virtual()
    st.write("Autores: Jo√£o Renan S. Lopes E Pedro Girotto")
    st.write("Centro Universit√°rio do Par√°")

def teoria():
    colored_header(label="Teoria do Bin√¥mio de Newton", description="O B√°sico e aplica√ß√µes", color_name="green-70")

    st.write("""
    O Bin√¥mio de Newton √© uma express√£o alg√©brica que permite expandir pot√™ncias de bin√¥mios de forma eficiente. 
    A f√≥rmula geral para $(x + y)^n$ √©:
    """)

    st.latex(r"(x + y)^n = \sum_{k=0}^n \binom{n}{k} x^{n-k} y^k")

    st.write(r"""
    Onde:
    - $n$ √© o expoente do bin√¥mio
    - $k$ √© o √≠ndice da soma, variando de 0 a n
    - $\binom{n}{k}$ √© o coeficiente binomial, tamb√©m conhecido como "n escolhe k"

    O coeficiente binomial $\binom{n}{k}$ representa o n√∫mero de maneiras de escolher $k$ itens de um conjunto de $n$ itens, e √© calculado como:
    """)

    st.latex(r"\binom{n}{k} = \frac{n!}{k!(n-k)!}")

    st.write("""
    Aplica√ß√µes do Bin√¥mio de Newton incluem:
    1. Expans√£o de express√µes alg√©bricas
    2. C√°lculo de probabilidades em distribui√ß√µes binomiais
    3. Aproxima√ß√µes em f√≠sica e engenharia
    4. Teoria dos n√∫meros e criptografia
    """)

    st.subheader("Exemplo 1: Expans√£o de $(x + 1)^3$")
    if st.button("Mostrar solu√ß√£o exemplo 1"):
        st.latex(r"(x + 1)^3 = x^3 + 3x^2 + 3x + 1")

    st.subheader("Exemplo 2: Expans√£o de $(2x + y)^4$")
    if st.button("Mostrar solu√ß√£o exemplo 2"):
        st.latex(r"(2x + y)^4 = 16x^4 + 32x^3y + 24x^2y^2 + 8xy^3 + y^4")

    add_vertical_space(2)
    st.info("üí° Dica: O Bin√¥mio de Newton √© uma ferramenta poderosa para simplificar c√°lculos complexos em v√°rias √°reas da matem√°tica e ci√™ncias aplicadas.")


def calculadora():
    colored_header(label="Calculadora do Bin√¥mio de Newton", description="Expanda bin√¥mios interativamente", color_name="blue-70")

    col1, col2 = st.columns(2)

    with col1:
        x = st.text_input("Primeiro termo (ex: x, 2x, -y)", "x")
        y = st.text_input("Segundo termo (ex: y, 3, 2z)", "y")
        n = st.slider("Expoente", 0, 10, 2)

    with col2:
        st.write("Expans√£o:")
        try:
            # Tenta converter as entradas para express√µes simb√≥licas
            expansion = sp.expand((sp.sympify(x) + sp.sympify(y)) ** n)
            st.latex(sp.latex(expansion))

            st.write("Termos individuais:")
            terms = expansion.as_ordered_terms()
            for i, term in enumerate(terms):
                st.latex(f"Termo {i + 1}: {sp.latex(term)}")
        except sp.SympifyError:
            st.error("Erro: Um ou mais termos n√£o puderam ser interpretados. Verifique as entradas e tente novamente.")

    add_vertical_space(2)

    with stylable_container(
            key="expansion_insight",
            css_styles="""
            {
                background-color: #e6f3ff;
                border: 1px solid #b3d9ff;
                border-radius: 10px;
                padding: 20px;
            }
            """
    ):
        st.markdown("### üîç Insight")
        st.write(f"A expans√£o de $({x} + {y})^{n}$ ter√° {n + 1} termos.")


def coeficientes():
    colored_header(label="Coeficientes Binomiais", description="Explore os coeficientes do Bin√¥mio de Newton", color_name="orange-70")

    col1, col2 = st.columns(2)

    with col1:
        n = st.number_input("n", 0, 20, 5)
        k = st.number_input("k", 0, n, 2)

        coef = sp.binomial(n, k)
        st.write(f"O coeficiente binomial $\\binom{{{n}}}{{{k}}}$ √©:")
        st.latex(sp.latex(coef))

    with col2:
        st.write("Visualiza√ß√£o:")
        fig, ax = plt.subplots()
        x = range(n + 1)
        y = [sp.binomial(n, i) for i in x]
        ax.bar(x, y)
        ax.set_title(f"Coeficientes Binomiais para n={n}")
        ax.set_xlabel("k")
        ax.set_ylabel("Coeficiente")
        st.pyplot(fig)

    add_vertical_space(2)
    st.info(f"üí° Interpreta√ß√£o: Existem {coef} maneiras de escolher {k} itens de um conjunto de {n} itens.")


def triangulo_pascal():
    st.title("Tri√¢ngulo de Pascal - Visualiza√ß√£o Ampliada")
    
    rows = st.slider("N√∫mero de linhas", 1, 20, 7)  # Permitindo at√© 20 linhas para melhorar a visualiza√ß√£o

    # Gerar o Tri√¢ngulo de Pascal
    triangle = [[1]]
    for i in range(1, rows):
        row = [1]
        for j in range(1, i):
            row.append(triangle[i - 1][j - 1] + triangle[i - 1][j])
        row.append(1)
        triangle.append(row)

    # Preparar a visualiza√ß√£o
    fig, ax = plt.subplots(figsize=(10, 8))  # Aumentando o tamanho da figura
    ax.set_axis_off()

    # Definir a dist√¢ncia entre os pontos e centralizar melhor
    for i, row in enumerate(triangle):
        for j, num in enumerate(row):
            ax.text(j - i / 2, -i, str(num), ha='center', va='center', fontweight='bold', fontsize=14)  # Aumentando o tamanho da fonte
            
            # Desenhar linhas conectando os n√∫meros para criar o formato de tri√¢ngulo
            if i > 0:
                if j < len(row) - 1:
                    ax.plot([j - i / 2, j - i / 2 - 0.5], [-i, -(i - 1)], color='black', lw=1)
                if j > 0:
                    ax.plot([j - i / 2, j - i / 2 + 0.5], [-i, -(i - 1)], color='black', lw=1)

    plt.title("Tri√¢ngulo de Pascal", fontsize=18)  # Aumentando o tamanho do t√≠tulo
    st.pyplot(fig)

    add_vertical_space(2)

    with stylable_container(
            key="pascal_facts",
            css_styles="""
            {
                background-color: #fff0f5;
                border: 1px solid #ffb3d9;
                border-radius: 10px;
                padding: 20px;
            }
            """
    ):
        st.markdown("### üåü Fatos Curiosos")
        st.write("1. As somas das linhas s√£o pot√™ncias de 2: 1, 2, 4, 8, 16, 32, ...")
        st.write("2. Os n√∫meros nas diagonais formam os n√∫meros de Fibonacci.")
        st.write("3. O tri√¢ngulo cont√©m padr√µes fractais como o Tri√¢ngulo de Sierpinski.")


def exercicios_criativos():
    colored_header(label="Exerc√≠cios Criativos", description="Teste seus conhecimentos de forma divertida", color_name="violet-70")

    exercises = [
        {
            "question": "Um jardim tem formato de tri√¢ngulo equil√°tero. Se a cada ano o jardineiro aumenta o comprimento de cada lado em 1 metro, quantos metros quadrados o jardim ter√° aumentado ap√≥s 3 anos?",
            "solution": r"""
            Seja $s$ o comprimento inicial do lado do jardim.
            A √°rea de um tri√¢ngulo equil√°tero √© dada por $A = \frac{\sqrt{3}}{4}s^2$.

            Ap√≥s 3 anos, o lado ser√° $s+3$.
            O aumento na √°rea ser√°:

            $\Delta A = \frac{\sqrt{3}}{4}((s+3)^2 - s^2)$

            $\Delta A = \frac{\sqrt{3}}{4}(s^2 + 6s + 9 - s^2)$

            $\Delta A = \frac{\sqrt{3}}{4}(6s + 9)$

            $\Delta A = \frac{3\sqrt{3}}{2}s + \frac{9\sqrt{3}}{4}$

            Este √© o aumento em metros quadrados ap√≥s 3 anos.
            """
        },
        {
            "question": "Um v√≠rus se multiplica a cada hora, dobrando sua popula√ß√£o. Se inicialmente havia 100 v√≠rus, quantos haver√° ap√≥s 8 horas?",
            "solution": r"""
            Este √© um problema de crescimento exponencial que pode ser resolvido usando o Bin√¥mio de Newton.

            A popula√ß√£o ap√≥s n horas ser√°: $100 \cdot 2^n$

            Para n = 8:

            $100 \cdot 2^8 = 100 \cdot 256 = 25.600$

            Portanto, ap√≥s 8 horas, haver√° 25.600 v√≠rus.
            """
        },
        {
            "question": "Em um jogo de dados, qual √© a probabilidade de obter exatamente 3 n√∫meros pares em 5 lan√ßamentos?",
            "solution": r"""
            Este √© um problema de probabilidade binomial.

            A probabilidade de obter um n√∫mero par em um lan√ßamento √© 3/6 = 1/2.

            Usamos o Bin√¥mio de Newton com n = 5 (total de lan√ßamentos) e k = 3 (n√∫mero de sucessos desejados).

            $P(X = 3) = \binom{5}{3} (1/2)^3 (1/2)^2$

            $= 10 \cdot (1/8) \cdot (1/4) = 10/32 = 5/16$

            A probabilidade √© 5/16 ou aproximadamente 0,3125 ou 31,25%.
            """
        },
        {
            "question": "Qual a expans√£o de $(3x + 2)^5$?",
            "solution": r"""
            A expans√£o de $(3x + 2)^5$ √©:

            $ = 243x^5 + 810x^4 + 1080x^3 + 720x^2 + 240x + 32$
            """
        }
    ]

    for i, exercise in enumerate(exercises):
        with st.expander(f"Exerc√≠cio {i + 1}"):
            st.write(exercise["question"])
            if st.button(f"Mostrar solu√ß√£o {i + 1}"):
                st.write(exercise["solution"])

    add_vertical_space(2)

    st.success("üèÜ Parab√©ns por enfrentar esses desafios! Lembre-se, a pr√°tica leva √† perfei√ß√£o em matem√°tica. Abra√ßos do monitor!")


def laboratorio_virtual():
    colored_header(label="Laborat√≥rio Virtual", description="Experimente com o Bin√¥mio de Newton", color_name="blue-green-70")

    st.write("""
    Bem-vindo ao Laborat√≥rio Virtual do Bin√¥mio de Newton! 
    Aqui voc√™ pode explorar como diferentes par√¢metros afetam a expans√£o do bin√¥mio.
    """)

    col1, col2 = st.columns(2)

    with col1:
        a = st.number_input("Coeficiente de x", -10.0, 10.0, 1.0, 0.1)
        b = st.number_input("Termo constante", -10.0, 10.0, 1.0, 0.1)
        n = st.slider("Expoente", 1, 10, 2)

    x = sp.Symbol('x')
    expansion = sp.expand((a * x + b) ** n)

    with col2:
        st.write("Expans√£o:")
        st.latex(sp.latex(expansion))

        st.write("Gr√°fico da fun√ß√£o:")
        x_vals = np.linspace(-2, 2, 100)
        y_vals = [expansion.subs(x, val) for val in x_vals]

        fig, ax = plt.subplots()
        ax.plot(x_vals, y_vals)
        ax.set_title(f"Gr√°fico de ({a}x + {b})^{n}")
        ax.set_xlabel("x")
        ax.set_ylabel("y")
        ax.grid(True)
        st.pyplot(fig)

    add_vertical_space(2)

    with stylable_container(
            key="lab_challenge",
            css_styles="""
            {
                background-color: #f0fff0;
                border: 1px solid #90ee90;
                border-radius: 10px;
                padding: 20px;
            }
            """
    ):
        st.markdown("### üß™ Desafio do Laborat√≥rio")
        st.write("Tente ajustar os par√¢metros para criar uma fun√ß√£o que:")
        challenge = random.choice([
            "Tenha tr√™s ra√≠zes reais",
            "Seja sempre positiva",
            "Tenha um ponto de inflex√£o",
            "Seja sim√©trica em rela√ß√£o ao eixo y"
        ])
        st.info(challenge)


if __name__ == "__main__":
    main()
