import streamlit as st
import sympy as sp
import matplotlib.pyplot as plt
import numpy as np
import random

def main():
    st.set_page_config(page_title='Bin√¥mio de Newton', page_icon="üìê", layout="centered")
    st.title("Bin√¥mio de Newton Interativo")

    st.sidebar.title('Navega√ß√£o')
    options = ["Teoria", "Calculadora", "Coeficientes", "Tri√¢ngulo de Pascal", "Laborat√≥rio",
               "Passo a Passo", "Identifica√ß√£o de Bin√¥mios", "Exerc√≠cios"]
    choice = st.sidebar.radio("Escolha uma op√ß√£o", options)

    if choice == "Teoria":
        teoria()
    elif choice == "Calculadora":
        calculadora()
    elif choice == "Coeficientes":
        coeficientes()
    elif choice == "Tri√¢ngulo de Pascal":
        triangulo_pascal()
    elif choice == "Exerc√≠cios":
        exercicios_criativos()
    elif choice == "Laborat√≥rio":
        laboratorio_virtual()
    elif choice == "Passo a Passo":
        passo_a_passo()
    elif choice == "Identifica√ß√£o de Bin√¥mios":
        identificacao_binomios()
    st.write("Autores: Jo√£o Renan S. Lopes E Pedro Girotto")
    st.write("Centro Universit√°rio do Par√°")

def teoria():
    st.header("Teoria do Bin√¥mio de Newton")
    st.subheader("O B√°sico e aplica√ß√µes")

    st.write(r"""
    O Bin√¥mio de Newton √© uma express√£o alg√©brica que permite expandir pot√™ncias de bin√¥mios de forma eficiente. 
    A f√≥rmula geral para $(x + y)^n$ √©:
    """)

    st.latex(r"(x + y)^n = \sum_{k=0}^n \binom{n}{k} x^{n-k} y^k")

    st.write(r"""
    Onde:
    - $n$ √© o expoente do bin√¥mio
    - $k$ √© o √≠ndice da soma, variando de 0 a n
    - $\binom{n}{k}$ √© o coeficiente binomial, tamb√©m conhecido como "n escolhe k"

    O coeficiente binomial $\binom{n}{k}$ representa o n√∫mero de maneiras de escolher $k$ itens de um conjunto de $n$ itens, e √© calculado como:
    """)

    st.latex(r"\binom{n}{k} = \frac{n!}{k!(n-k)!}")

    st.write("""
    Aplica√ß√µes do Bin√¥mio de Newton incluem:
    1. Expans√£o de express√µes alg√©bricas
    2. C√°lculo de probabilidades em distribui√ß√µes binomiais
    3. Aproxima√ß√µes em f√≠sica e engenharia
    4. Teoria dos n√∫meros e criptografia
    """)

    st.subheader("Exemplo 1: Expans√£o de $(x + 1)^3$")
    if st.button("Mostrar solu√ß√£o exemplo 1"):
        st.latex(r"(x + 1)^3 = x^3 + 3x^2 + 3x + 1")

    st.subheader("Exemplo 2: Expans√£o de $(2x + y)^4$")
    if st.button("Mostrar solu√ß√£o exemplo 2"):
        st.latex(r"(2x + y)^4 = 16x^4 + 32x^3y + 24x^2y^2 + 8xy^3 + y^4")

    st.info("Dica: O Bin√¥mio de Newton √© uma ferramenta poderosa para simplificar c√°lculos complexos em v√°rias √°reas da matem√°tica e ci√™ncias aplicadas.")

def calculadora():
    st.header("Calculadora do Bin√¥mio de Newton")
    st.subheader("Expanda bin√¥mios interativamente")

    col1, col2 = st.columns(2)

    with col1:
        x = st.text_input("Primeiro termo (ex: x, 2*x, -y)", "x")
        y = st.text_input("Segundo termo (ex: y, 3, 2*z)", "y")
        n = st.slider("Expoente", 0, 10, 2)

    with col2:
        st.write("Expans√£o:")
        try:
            expansion = sp.expand((sp.sympify(x) + sp.sympify(y)) ** n)
            st.latex(sp.latex(expansion))

            st.write("Termos individuais:")
            terms = expansion.as_ordered_terms()
            for i, term in enumerate(terms):
                st.latex(f"Termo {i + 1}: {sp.latex(term)}")
        except sp.SympifyError:
            st.error("Erro: Um ou mais termos n√£o puderam ser interpretados. Verifique as entradas e tente novamente.")

    st.subheader("Insight")
    st.write(f"A expans√£o de ({x} + {y})^{n} ter√° {n + 1} termos.")

def coeficientes():
    st.header("Coeficientes Binomiais")
    st.subheader("Explore os coeficientes do Bin√¥mio de Newton")

    col1, col2 = st.columns(2)

    with col1:
        n = st.number_input("n", 0, 20, 5)
        k = st.number_input("k", 0, n, 2)

        coef = sp.binomial(n, k)
        st.write(f"O coeficiente binomial $\\binom{{{n}}}{{{k}}}$ √©:")
        st.latex(sp.latex(coef))

    with col2:
        st.write("Visualiza√ß√£o:")
        fig, ax = plt.subplots()
        x = range(n + 1)
        y = [sp.binomial(n, i) for i in x]
        ax.bar(x, y)
        ax.set_title(f"Coeficientes Binomiais para n={n}")
        ax.set_xlabel("k")
        ax.set_ylabel("Coeficiente")
        st.pyplot(fig)

    st.info(f"Interpreta√ß√£o: Existem {coef} maneiras de escolher {k} itens de um conjunto de {n} itens.")

def triangulo_pascal():
    st.header("Tri√¢ngulo de Pascal - Visualiza√ß√£o Ampliada")

    rows = st.slider("N√∫mero de linhas", 1, 10, 7)

    triangle = [[1]]
    for i in range(1, rows):
        row = [1]
        for j in range(1, i):
            row.append(triangle[i - 1][j - 1] + triangle[i - 1][j])
        row.append(1)
        triangle.append(row)

    fig, ax = plt.subplots(figsize=(10, 8))
    ax.set_axis_off()

    for i, row in enumerate(triangle):
        for j, num in enumerate(row):
            ax.text(j - i / 2, -i, str(num), ha='center', va='center', fontweight='bold', fontsize=14)

            if i > 0:
                if j < len(row) - 1:
                    ax.plot([j - i / 2, j - i / 2 - 0.5], [-i, -(i - 1)], color='black', lw=1)
                if j > 0:
                    ax.plot([j - i / 2, j - i / 2 + 0.5], [-i, -(i - 1)], color='black', lw=1)

    plt.title("Tri√¢ngulo de Pascal", fontsize=18)
    st.pyplot(fig)

    st.subheader("Fatos Curiosos")
    st.write("1. As somas das linhas s√£o pot√™ncias de 2: 1, 2, 4, 8, 16, 32, ...")
    st.write("2. Os n√∫meros nas diagonais formam os n√∫meros de Fibonacci.")
    st.write("3. O tri√¢ngulo cont√©m padr√µes fractais como o Tri√¢ngulo de Sierpinski.")

def exercicios_criativos():
    st.header("Exerc√≠cios Criativos")
    st.subheader("Hora da verdade!")

    exercises = [
        {
            "question": "Um jardim tem formato de tri√¢ngulo equil√°tero. Se a cada ano o jardineiro aumenta o comprimento de cada lado em 1 metro, quantos metros quadrados o jardim ter√° aumentado ap√≥s 3 anos?",
            "solution": r"""
            Seja $s$ o comprimento inicial do lado do jardim.
            A √°rea de um tri√¢ngulo equil√°tero √© dada por $A = \frac{\sqrt{3}}{4}s^2$.

            Ap√≥s 3 anos, o lado ser√° $s+3$.
            O aumento na √°rea ser√°:

            $\Delta A = \frac{\sqrt{3}}{4}((s+3)^2 - s^2)$

            $\Delta A = \frac{\sqrt{3}}{4}(s^2 + 6s + 9 - s^2)$

            $\Delta A = \frac{\sqrt{3}}{4}(6s + 9)$

            $\Delta A = \frac{3\sqrt{3}}{2}s + \frac{9\sqrt{3}}{4}$

            Este √© o aumento em metros quadrados ap√≥s 3 anos.
            """
        },
        {
            "question": "Um v√≠rus se multiplica a cada hora, dobrando sua popula√ß√£o. Se inicialmente havia 100 v√≠rus, quantos haver√° ap√≥s 8 horas?",
            "solution": r"""
            Este √© um problema de crescimento exponencial que pode ser resolvido usando o Bin√¥mio de Newton.

            A popula√ß√£o ap√≥s n horas ser√°: $100 \cdot 2^n$

            Para n = 8:

            $100 \cdot 2^8 = 100 \cdot 256 = 25.600$

            Portanto, ap√≥s 8 horas, haver√° 25.600 v√≠rus.
            """
        },
        {
            "question": "Em um jogo de dados, qual √© a probabilidade de obter exatamente 3 n√∫meros pares em 5 lan√ßamentos?",
            "solution": r"""
            Este √© um problema de probabilidade binomial.

            A probabilidade de obter um n√∫mero par em um lan√ßamento √© 3/6 = 1/2.

            Usamos o Bin√¥mio de Newton com n = 5 (total de lan√ßamentos) e k = 3 (n√∫mero de sucessos desejados).

            $P(X = 3) = \binom{5}{3} (1/2)^3 (1/2)^2$

            $= 10 \cdot (1/8) \cdot (1/4) = 10/32 = 5/16$

            A probabilidade √© 5/16 ou aproximadamente 0,3125 ou 31,25%.
            """
        },
        {
            "question": "Qual a expans√£o de $(3x + 2)^5$?",
            "solution": r"""
            A expans√£o de $(3x + 2)^5$ √©:

            $ = 243x^5 + 810x^4 + 1080x^3 + 720x^2 + 240x + 32$
            """
        }
    ]

    for i, exercise in enumerate(exercises):
        with st.expander(f"Exerc√≠cio {i + 1}"):
            st.write(exercise["question"])
            if st.button(f"Mostrar solu√ß√£o {i + 1}"):
                st.write(exercise["solution"])

    st.success("Parab√©ns por enfrentar esses desafios! Lembre-se, a pr√°tica leva √† perfei√ß√£o em matem√°tica. Abra√ßos do monitor!")

def laboratorio_virtual():
    st.header("Laborat√≥rio Virtual")
    st.subheader("Experimente com o Bin√¥mio de Newton")

    st.write("""
    Bem-vindo ao Laborat√≥rio Virtual do Bin√¥mio de Newton! 
    Aqui voc√™ pode explorar como diferentes par√¢metros afetam a expans√£o do bin√¥mio.
    """)

    col1, col2 = st.columns(2)

    with col1:
        a = st.number_input("Coeficiente de x", -10.0, 10.0, 1.0, 0.1)
        b = st.number_input("Termo constante", -10.0, 10.0, 1.0, 0.1)
        n = st.slider("Expoente", 1, 10, 2)

    x = sp.Symbol('x')
    expansion = sp.expand((a * x + b) ** n)

    with col2:
        st.write("Expans√£o:")
        st.latex(sp.latex(expansion))

        st.write("Gr√°fico da fun√ß√£o:")
        x_vals = np.linspace(-2, 2, 100)
        y_vals = [expansion.subs(x, val) for val in x_vals]

        fig, ax = plt.subplots()
        ax.plot(x_vals, y_vals)
        ax.set_title(f"Gr√°fico de ({a}x + {b})^{n}")
        ax.set_xlabel("x")
        ax.set_ylabel("y")
        ax.grid(True)
        st.pyplot(fig)

    st.subheader("Desafio do Laborat√≥rio")
    st.write("Tente ajustar os par√¢metros para criar uma fun√ß√£o que:")
    challenge = random.choice([
        "Tenha tr√™s ra√≠zes reais",
        "Seja sempre positiva",
        "Tenha um ponto de inflex√£o",
        "Seja sim√©trica em rela√ß√£o ao eixo y"
    ])
    st.info(challenge)

def passo_a_passo():
    st.header("Passo a Passo")
    st.subheader("Como expandir e simplificar um bin√¥mio")

    st.write(r"""
    Antes de iniciar a parte interativa, √© importante entender detalhadamente como expandir um bin√¥mio passo a passo.

    ### Entendendo o Bin√¥mio de Newton

    O Bin√¥mio de Newton √© uma f√≥rmula que permite expandir pot√™ncias de bin√¥mios. A f√≥rmula geral √©:

    $$(x + y)^n = \sum_{k=0}^n \binom{n}{k} x^{n-k} y^k$$

    Onde:
    - $n$ √© o expoente do bin√¥mio
    - $k$ √© o √≠ndice da soma, variando de 0 a n
    - $\binom{n}{k}$ √© o coeficiente binomial, tamb√©m conhecido como "n escolhe k"

    ### Passo a Passo para Expandir um Bin√¥mio

    Utiliza-se o exemplo $(a + b)^3$ para ilustrar o processo:

    1. Identifica√ß√£o dos valores de $n$, $x$, e $y$:
       - $n = 3$
       - $x = a$
       - $y = b$

    2. Aplica√ß√£o da f√≥rmula para cada valor de $k$ de 0 a $n$:

       - Para $k = 0$: $\binom{3}{0} a^3 b^0 = 1 \cdot a^3 \cdot 1 = a^3$
       - Para $k = 1$: $\binom{3}{1} a^2 b^1 = 3 \cdot a^2 \cdot b = 3a^2b$
       - Para $k = 2$: $\binom{3}{2} a^1 b^2 = 3 \cdot a \cdot b^2 = 3ab^2$
       - Para $k = 3$: $\binom{3}{3} a^0 b^3 = 1 \cdot 1 \cdot b^3 = b^3$

    3. Soma de todos os termos:

       $(a + b)^3 = a^3 + 3a^2b + 3ab^2 + b^3$

    Este √© o resultado final da expans√£o.

    ### Pontos Importantes a Serem Lembrados

    - O n√∫mero de termos na expans√£o ser√° sempre $n + 1$.
    - Os expoentes de $x$ diminuem de $n$ at√© 0, enquanto os de $y$ aumentam de 0 at√© $n$.
    - Os coeficientes binomiais $\binom{n}{k}$ formam o Tri√¢ngulo de Pascal.

    Ap√≥s compreender o processo, pode-se praticar com alguns exemplos interativos.
    """)

    col1, col2 = st.columns(2)

    with col1:
        x = st.text_input("Primeiro termo (ex: x, 2*x, -y)", "x")
        y = st.text_input("Segundo termo (ex: y, 3, 2*z)", "2")
        n = st.slider("Expoente", 1, 5, 3)

    with col2:
        st.write(f"Expandindo: $({x} + {y})^{n}$")

    if st.button("Expandir passo a passo"):
        try:
            x_sym, y_sym = sp.symbols('x y')
            expr = (sp.sympify(x) + sp.sympify(y)) ** n
            expansion = sp.expand(expr)

            st.write("### Passos da expans√£o:")
            for k in range(n + 1):
                term = sp.binomial(n, k) * sp.sympify(x) ** (n - k) * sp.sympify(y) ** k
                st.latex(rf"\binom{{{n}}}{{{k}}} \cdot ({x})^{{{n - k}}} \cdot ({y})^{{{k}}} = {sp.latex(term)}")

            st.write("### Resultado final:")
            st.latex(sp.latex(expansion))
        except sp.SympifyError:
            st.error(
                "Erro ao processar a express√£o. √â necess√°rio usar '*' para multiplica√ß√£o (ex: 2*x em vez de 2x).")

    st.info("Experimente com diferentes termos e expoentes para observar como a expans√£o se modifica.")

    # Se√ß√£o de exerc√≠cios interativos
    st.subheader("Exerc√≠cios Interativos")

    exercise_type = st.radio("Escolha o tipo de exerc√≠cio:", ["Expans√£o", "Coeficiente Espec√≠fico"])

    if exercise_type == "Expans√£o":
        a, b = random.randint(1, 5), random.randint(1, 5)
        n = random.randint(2, 4)
        expr = sp.expand((a * sp.Symbol('x') + b) ** n)
        st.write('Expanda')
        st.latex(rf"({a}x + {b})^{{{n}}}")
        user_answer = st.text_input("Resposta:")

        if st.button("Verificar"):
            try:
                if sp.expand(sp.sympify(user_answer)) == expr:
                    st.success("Correto! A resposta est√° precisa.")
                else:
                    st.error("Incorreto. √â recomend√°vel tentar novamente.")
            except:
                st.error("Erro ao processar a resposta. Verifique a sintaxe.")

        if st.button("Mostrar solu√ß√£o"):
            st.write("A expans√£o √©:")
            st.latex(sp.latex(expr))

    elif exercise_type == "Coeficiente Espec√≠fico":
        a, b = random.randint(1, 5), random.randint(1, 5)
        n = random.randint(4, 6)
        k = random.randint(1, n - 1)
        coef = sp.binomial(n, k) * a ** (n - k) * b ** k

        st.write('Qual √© o coeficiente de')
        st.latex(rf"x^{{{n - k}}} \text{{ na expans√£o de }} ({a}x + {b})^{{{n}}}")
        user_answer = st.number_input("Resposta:", step=1)

        if st.button("Verificar"):
            if user_answer == coef:
                st.success("Correto! A resposta est√° precisa.")
            else:
                st.error("Incorreto. √â recomend√°vel tentar novamente.")

        if st.button("Mostrar solu√ß√£o"):
            st.write("O coeficiente √©:")
            st.latex(rf"\binom{{{n}}}{{{k}}} \cdot {a}^{{{n - k}}} \cdot {b}^{{{k}}} = {coef}")

def identificacao_binomios():
    st.header("Identifica√ß√£o de Bin√¥mios")
    st.subheader("Como identificar bin√¥mios de express√µes expandidas")

    st.write(r"""
    Antes de praticar a identifica√ß√£o de bin√¥mios, √© importante entender o processo de como reconhecer um bin√¥mio expandido e reduzi-lo √† sua forma original.

    ### Processo de Identifica√ß√£o de Bin√¥mios

    1. **Observa√ß√£o do grau**: O maior expoente na express√£o expandida ser√° o expoente do bin√¥mio original.

    2. **Identifica√ß√£o dos termos**: Em um bin√¥mio $(ax + b)^n$, encontram-se:
       - Um termo com $x^n$
       - Um termo constante (sem $x$)
       - Termos intermedi√°rios com pot√™ncias de $x$ decrescendo de $n-1$ at√© 1

    3. **Determina√ß√£o de $a$ e $b$**:
       - $a$ √© a raiz n-√©sima do coeficiente de $x^n$
       - $b$ √© a raiz n-√©sima do termo constante

    4. **Verifica√ß√£o dos coeficientes**: Os coeficientes devem seguir o padr√£o do Tri√¢ngulo de Pascal multiplicado por pot√™ncias de $a$ e $b$.

    ### Exemplo Detalhado

    Identifica√ß√£o do bin√¥mio original para a express√£o: $x^3 + 6x^2 + 12x + 8$

    1. **Grau**: O maior expoente √© 3, ent√£o $n = 3$.

    2. **Termos**: Presen√ßa de $x^3$, $x^2$, $x$, e um termo constante. A express√£o est√° completa.

    3. **Determina√ß√£o de $a$ e $b$**:
       - Coeficiente de $x^3$ √© 1, ent√£o $a = 1$
       - Termo constante √© 8, ent√£o $b = 2$ (pois $2^3 = 8$)

    4. **Verifica√ß√£o dos coeficientes**:
       - $\binom{3}{0} = 1$ (coeficiente de $x^3$)
       - $\binom{3}{1} \cdot 2 = 3 \cdot 2 = 6$ (coeficiente de $x^2$)
       - $\binom{3}{2} \cdot 2^2 = 3 \cdot 4 = 12$ (coeficiente de $x$)
       - $\binom{3}{3} \cdot 2^3 = 1 \cdot 8 = 8$ (termo constante)

    Portanto, o bin√¥mio original √© $(x + 2)^3$.

    ### Dicas para Identifica√ß√£o

    - Se o coeficiente de $x^n$ n√£o for 1, divide-se todos os termos por este coeficiente primeiro.
    - Aten√ß√£o aos sinais: se h√° altern√¢ncia de sinais, provavelmente o segundo termo do bin√¥mio √© negativo.
    - Utiliza-se o Tri√¢ngulo de Pascal para verificar se os coeficientes seguem o padr√£o esperado.

    Ap√≥s compreender o processo de identifica√ß√£o, pode-se praticar com alguns exemplos interativos.
    """)

    # Lista de bin√¥mios pr√©-definidos
    binomios = [
        ("x + 1", 2),
        ("x - 2", 3),
        ("2*x + 3", 2),
        ("3*x - 1", 3),
        ("x + y", 2)
    ]

    # Escolha aleat√≥ria de um bin√¥mio
    x, y = sp.symbols('x y')
    binomio, expoente = random.choice(binomios)
    try:
        expr = sp.expand((sp.sympify(binomio)) ** expoente)
    except sp.SympifyError:
        st.error("Erro ao processar o bin√¥mio. √â necess√°rio recarregar a p√°gina.")
        return

    st.subheader(f"Identifique o bin√¥mio original da express√£o:")
    st.latex(sp.latex(expr))

    col1, col2 = st.columns(2)

    with col1:
        user_binomio = st.text_input("Digite o bin√¥mio que se acredita ser o correto (ex: x+1)", "")
    with col2:
        user_expoente = st.number_input("Digite o expoente", 1, 5, 2)

    if st.button("Verificar"):
        if user_binomio and user_expoente:
            try:
                user_expr = sp.expand((sp.sympify(user_binomio)) ** user_expoente)
                if user_expr == expr:
                    st.success("Correto! O bin√¥mio original foi identificado corretamente.")
                else:
                    st.error("Incorreto. √â recomend√°vel tentar novamente.")
                    st.write("Dica: Observe atentamente os coeficientes e os termos constantes.")
            except sp.SympifyError:
                st.error("Erro ao processar a resposta. Verifique a sintaxe e use '*' para multiplica√ß√£o.")
        else:
            st.warning("√â necess√°rio preencher o bin√¥mio e o expoente antes de verificar.")

    if st.button("Revelar resposta"):
        st.write("O bin√¥mio original era:")
        st.latex(rf"({binomio})^{{{expoente}}}")

    st.success("Continue praticando para aprimorar as habilidades de identifica√ß√£o de bin√¥mios.")

    # Se√ß√£o de exerc√≠cios interativos
    st.subheader("Exerc√≠cios Interativos de Identifica√ß√£o")

    difficulty = st.radio("Escolha o n√≠vel de dificuldade:", ["Nivel 1", "Nivel 2", "Nivel 3"])

    if difficulty == "Nivel 1":
        a, b = random.randint(1, 5), random.randint(1, 5)
        n = 2
    elif difficulty == "Nivel 2":
        a, b = random.randint(1, 10), random.randint(1, 10)
        n = 3
    else:
        a, b = random.randint(1, 15), random.randint(1, 15)
        n = 4

    expr = sp.expand((a * sp.Symbol('x') + b) ** n)

    st.write("Identifique o bin√¥mio e o expoente para a seguinte express√£o expandida:")
    st.latex(sp.latex(expr))

    col1, col2 = st.columns(2)
    with col1:
        user_a = st.number_input("Coeficiente de x:", step=1)
        user_b = st.number_input("Termo constante:", step=1)
    with col2:
        user_n = st.number_input("Expoente:", min_value=1, step=1)

    if st.button("Verificar identifica√ß√£o"):
        if user_a == a and user_b == b and user_n == n:
            st.success("Correto! O bin√¥mio original foi identificado perfeitamente.")
        else:
            st.error("Incorreto. Recomenda-se analisar a express√£o mais cuidadosamente.")

    if st.button("Mostrar bin√¥mio original"):
        st.write("O bin√¥mio original √©:")
        st.latex(rf"({a}x + {b})^{{{n}}}")

if __name__ == "__main__":
    main()
